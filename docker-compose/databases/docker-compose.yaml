---
services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "https://${LOKI_URL}/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: "800ms"
        loki-timeout: "1s"
        loki-batch-size: 100
        loki-batch-wait: 1s
        mode: non-blocking
    volumes:
      - ${DOCKER_DATA}/postgresql/data:/var/lib/postgresql/data
      - ${CERTS_PATH}/certs:/certs:z
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_AUTH}
    ports:
      - 5432:5432
    networks:
      - server-database

  mysql:
    image: mysql
    container_name: mysql
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "https://${LOKI_URL}/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: "800ms"
        loki-timeout: "1s"
        loki-batch-size: 100
        loki-batch-wait: 1s
        mode: non-blocking
    volumes:
      - ${DOCKER_DATA}/mysql/data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - 3306:3306
    networks:
      - server-database

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "https://${LOKI_URL}/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: "800ms"
        loki-timeout: "1s"
        loki-batch-size: 100
        loki-batch-wait: 1s
        mode: non-blocking
    volumes:
      - ${DOCKER_DATA}/redis/data:/data
    ports:
      - 6379:6379
    networks:
      - server-database

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "https://${LOKI_URL}/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: "800ms"
        loki-timeout: "1s"
        loki-batch-size: 100
        loki-batch-wait: 1s
        mode: non-blocking
    volumes:
      - ${DOCKER_DATA}/mongo/data:/data/db
      - ${DOCKER_DATA}/mongo/config:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - 27017:27017
    networks:
      - server-database

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "https://${LOKI_URL}/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: "800ms"
        loki-timeout: "1s"
        loki-batch-size: 100
        loki-batch-wait: 1s
        mode: non-blocking
    volumes:
      - ${CERTS_PATH}/certs:/certs:Z
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${EXPRESS_PASSWORD}
      ME_CONFIG_SITE_SSL_CRT_PATH: ${EXPRESS_CERTIFICATE}
      ME_CONFIG_SITE_SSL_KEY_PATH: ${EXPRESS_PRIVATE_KEY}
      ME_CONFIG_SITE_SSL_ENABLED: ${EXPRESS_SSL}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_SERVER}
      ME_CONFIG_MONGODB_PORT: ${MONGO_PORT}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
    ports:
      - 8081:8081
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongo-express.entrypoints=https
      - traefik.http.routers.mongo-express.rule=Host(`mongo.db.${DOMAIN}`)
      - traefik.http.routers.mongo-express.tls=true
      - traefik.http.services.mongo-express.loadbalancer.server.scheme=https
      - traefik.http.services.mongo-express.loadbalancer.server.port=8081
      - traefik.http.routers.mongo-express.tls.certresolver=cloudflare
      - traefik.http.routers.mongo-express.service=mongo-express
    links:
      - mongo
    networks:
      - server-database
      - server-backend

  influxdb:
    image: influxdb:alpine
    container_name: influxdb
    restart: always
    logging:
      driver: loki
      options:
        loki-url: "https://${LOKI_URL}/loki/api/v1/push"
        loki-retries: 2
        loki-max-backoff: "800ms"
        loki-timeout: "1s"
        loki-batch-size: 100
        loki-batch-wait: 1s
        mode: non-blocking
    volumes:
      - ${DOCKER_DATA}/influxdb/data:/var/lib/influxdb2:Z
      - ${DOCKER_DATA}/influxdb/config:/etc/influxdb2:Z
      - ${CERTS_PATH}/certs:/certs:Z
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=${INFLUX_MODE}
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUX_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUX_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
      - INFLUXD_TLS_CERT=${INFLUX_CERTIFICATE}
      - INFLUXD_TLS_KEY=${INFLUX_PRIVATE_KEY}
    ports:
      - 8086:8086
    labels:
      - traefik.enable=true
      - traefik.http.routers.influxdb.entrypoints=https
      - traefik.http.routers.influxdb.rule=Host(`influx.db.${DOMAIN}`)
      - traefik.http.routers.influxdb.tls=true
      - traefik.http.services.influxdb.loadbalancer.server.scheme=https
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
      - traefik.http.routers.influxdb.tls.certresolver=cloudflare
      - traefik.http.routers.influxdb.service=influxdb
    networks:
      - server-database
      - server-backend

networks:
  server-database:
  server-backend:
    external: true
